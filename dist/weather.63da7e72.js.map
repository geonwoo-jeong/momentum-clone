{"version":3,"sources":["src/weather.ts"],"names":[],"mappings":"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","file":"weather.63da7e72.js","sourceRoot":"..","sourcesContent":["const weather = (function() {\r\n  interface Coords {\r\n    latitude: number;\r\n    longitude: number;\r\n  }\r\n\r\n  const API_KEY = \"269f45b2cddefb4199d5fab1bdae27d7\";\r\n  const COORDS = \"coords\";\r\n  const doc = <HTMLDocument>document;\r\n  const weather = <HTMLSpanElement>doc.querySelector(\".js-weather\");\r\n\r\n  const positionOptions: PositionOptions = {\r\n    enableHighAccuracy: true,\r\n    maximumAge: 10000,\r\n    timeout: 5000\r\n  };\r\n\r\n  async function getWeather(latitude: number, longitude: number) {\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}8&appid=${API_KEY}&units=metric`\r\n      );\r\n      const json = await response.json();\r\n      const {\r\n        main: { temp },\r\n        name\r\n      } = json;\r\n      weather.innerText = `${temp}Â° @ ${name}`;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  function setCoords(coordsObj: Coords) {\r\n    localStorage.setItem(COORDS, JSON.stringify(coordsObj));\r\n  }\r\n\r\n  function handleGetCurrentPositionSuccess(position: Position) {\r\n    const {\r\n      coords: { latitude, longitude }\r\n    } = position;\r\n    const coordsObj: Coords = {\r\n      latitude,\r\n      longitude\r\n    };\r\n    setCoords(coordsObj);\r\n    getWeather(latitude, longitude);\r\n  }\r\n\r\n  function handleGeoCurrentPositionError(error: PositionError) {\r\n    console.log(\"Can't access geo location\");\r\n    console.log(error);\r\n  }\r\n\r\n  function askForCoords() {\r\n    navigator.geolocation.getCurrentPosition(\r\n      handleGetCurrentPositionSuccess,\r\n      handleGeoCurrentPositionError,\r\n      positionOptions\r\n    );\r\n  }\r\n\r\n  function loadCoords() {\r\n    const loadedCoords = localStorage.getItem(COORDS);\r\n\r\n    if (loadedCoords === null) {\r\n      askForCoords();\r\n    } else {\r\n      const parsedCoords: Coords = JSON.parse(loadedCoords);\r\n      const { latitude, longitude } = parsedCoords;\r\n      getWeather(latitude, longitude);\r\n    }\r\n  }\r\n\r\n  function init() {\r\n    loadCoords();\r\n  }\r\n\r\n  init();\r\n})();\r\n"]}